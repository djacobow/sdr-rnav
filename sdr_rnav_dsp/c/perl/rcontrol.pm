# Author: David Jacobowitz
#         david.jacobowitz@gmail.com
#
# Date  : Fall 2013
#
# Copyright 2013, David Jacobowitz

# routines for interacting with the "Radio" by which I mean
# the rtl2832 device, through the dp_radio2832 wrapper object

package rcontrol;

use strict;
use warnings qw(all);

use Exporter qw(import);
our @EXPORT = ('radio_init', 'fft_mode_enable', 'change_freq', 'try_pop_all');

use dplib;
use dsp_chain;

# routine to pull off everything up to the last element in a 
# concurrent queue (provided by Thread::Queue). This function
# is used frequently to access results generated by the dsp
# thread. The dsp thread is always running, so in general, there 
# is no interest in old results, we can just pop down to the latest.
sub try_pop_all {
 my $q = shift;
 my $i = undef;
 my $item_defined = $q->pending();
 while ($item_defined) {
  $i = $q->dequeue_nb();
  $item_defined = $q->pending();
 };
 return $i;
};


sub radio_init {
 my $cfg   = shift;
 my $idx   = shift;
 print "-pi- radio init\n";
 my $radio = dp_create_radio2832();
 my $dev_count = dp_radio2832_list_devices($radio);
 my $ok = dp_radio2832_open_device($radio,$idx);
 if ($ok) {
  print ("-pe- could not open radio index $idx\n");
  return $ok;
 }

 my $cbthread = threads->create(\&radio_cb_thread,$radio);
 my $gcount = dp_radio2832_get_tuner_gains($radio);
 #dp_radio2832_dev_cmd_st_only($radio,$cfg->{rcmds}{ST_TUNER_GAIN_MODE},1);
 #dp_radio2832_dev_cmd_st_only($radio,$cfg->{rcmds}{ST_TUNER_GAIN},402);
 return ($radio, $cbthread);
};

sub radio_cb_thread {
 my $radio = shift;
 dplib::rtl2832_thread_fn($radio);
};

# this routine switch between two modes of operation
# fft_mode_enable($c,0) turns on the VOR decode objects, sets the 
#  sample rate appropriate for decoding, and turns off the FFT 
#  of the incoming samples.
# fft_mode_enalbe($c,1) turns off the VOR decode objects,
#  sets the sample rate to a higher one so that we can scan more
#  spectrum in one go, and turns on the FFT of income samples.
sub fft_mode_enable {
 my $cfg = shift;
 my $on  = shift;
 my $slg  = $cfg->{slg};
 if (!defined($on)) { $on = 0; };
 $slg->set_u32('perform_fft',$on ? 1 : 0 );
 $slg->set_u32('curr_sample_rate',$cfg->{srates}{ $on ? 'fft' : 'if0'});
 $slg->set_u32('use_mixer',$on ? 0 : 1 );
 updateSettings($cfg);
};

sub change_freq {
 my $cfg = shift;
 my $f   = shift;
 my $slg = $cfg->{slg};
 $slg->set_u32('curr_freq',$f);
 dp_radio2832_dev_cmd_st_only($cfg->{olist}{named}{radio0}{obj},$cfg->{rcmds}{ST_FREQ},$f);
 #updateSettings($cfg); # not necessary to change frequency only
 dp_thresh_rethresh($cfg->{olist}{named}{morse_thresholder}{obj});
};

1;

