#!/usr/bin/perl -w

use strict;
use warnings qw(all);
use Data::Dumper;

my $rstat_header_name = 'receiver_stat.h';
my $rstat_type_name   = 'receiver_stat_t';
my $bname             = 'rstat_pl_access';


my $struct_data = readRstat();

makeSetterGetters($struct_data);

sub readRstat {
 my $sdata = {};

 my $ifh;
 open($ifh,'<',$rstat_header_name);
 my $in_s = 0;
 while (<$ifh>) {
  my $l = $_; chomp $l;
  if ($l =~ /$rstat_type_name/) {
   $in_s = !$in_s;
  } elsif ($in_s) {
   $l =~ s/^\s*//;
   $l =~ s/\s*$//;
   $l =~ s/\/\*.*\*\///;

   my @pieces = map { $_ =~ s/^\s*//; $_ =~ s/\s*$//; $_; } split(/(\W+)/,$l);
   my $semicolon = pop @pieces;
   my $vname     = pop @pieces;
   my $type      = join(' ',@pieces);
   $sdata->{$vname} = $type;
  }
 }
 close $ifh;
 return $sdata;
};


sub makeSetterGetters {

 my $sdata = shift;

 my ($cfh,$hfh);
 open($cfh,'>',$bname . '.c');
 open($hfh,'>',$bname . '.h');

 my $cmt1 = "/*\nAutogenerated by $0\non " . 
            (scalar localtime(time)) . 
	    "\nfrom $rstat_header_name\n" .
	    "\n*/\n";
 print $hfh $cmt1;
 print $cfh $cmt1;

 my $incl1 = '#include "' . $rstat_header_name . '"' . "\n";

 print $hfh '#ifndef __RSTAT_PL_ACCESS_H' . "\n";
 print $hfh '#define __RSTAT_PL_ACCESS_H' . "\n\n";
 print $hfh $incl1;
 print $cfh $incl1;
 print $cfh "#include \"$bname.h\"\n";

 foreach my $n (keys %$sdata) {
  my $t = $sdata->{$n};

  my $decl1 = 'void dp_pl_rstat_set_' . $n . 
             '(' . $rstat_type_name . ' *r,' . $t . ' v)';
  print $hfh $decl1 . ";\n";
  print $cfh $decl1 . " {\n" . ' r->' . $n . ' = v;' . "\n" . "}\n";

  my $decl2 = $t . ' dp_pl_rstat_get_' . $n . '(' . $rstat_type_name . ' *r)';
  print $hfh $decl2 . ";\n";
  print $cfh $decl2 . " {\n" . ' return r->' . $n .';' . "\n" . "}\n";
 };
 print $hfh '#endif' . "\n";
 close $hfh;
 close $cfh;
};

